# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:49:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Type(Enum):
    PLAN = 'PLAN'
    EXTRA = 'EXTRA'


class A2pUpgradeLeaseDto(BaseModel):
    blocked: Optional[datetime] = Field(None, description='~')
    canceled: Optional[bool] = Field(None, description='~')
    createdAt: Optional[datetime] = Field(None, description='~')
    deleted: Optional[bool] = Field(None, description='~')
    id: Optional[int] = Field(None, description='~')
    invoiceId: Optional[int] = Field(None, description='~')
    nextBilling: Optional[datetime] = Field(None, description='~')
    packaged: Optional[bool] = Field(None, description='~')
    prepaidDiscountId: Optional[int] = Field(None, description='~')
    price: Optional[float] = Field(None, description='~')
    type: Optional[Type] = Field(None, description='~')
    updatedAt: Optional[datetime] = Field(None, description='~')


class Brand(Enum):
    EZTEXTING = 'EZTEXTING'
    CLUBTEXTING = 'CLUBTEXTING'
    GROUPTEXTING = 'GROUPTEXTING'
    TELLMYCELL = 'TELLMYCELL'
    EZ = 'EZ'
    CALLFIRE = 'CALLFIRE'
    TESLA = 'TESLA'


class Country(Enum):
    US = 'US'
    CA = 'CA'


class CountryOrDefault(Enum):
    US = 'US'
    CA = 'CA'


class EntityType(Enum):
    SP = 'SP'
    COMPANY = 'COMPANY'


class Industry(Enum):
    UNKNOWN = 'UNKNOWN'
    ADVERTISING = 'ADVERTISING'
    AUTOMOTIVE = 'AUTOMOTIVE'
    COLLECTIONS = 'COLLECTIONS'
    CONSULTING = 'CONSULTING'
    DECLINE = 'DECLINE'
    EDUCATION = 'EDUCATION'
    EMERGENCY = 'EMERGENCY'
    ENTERTAINMENT = 'ENTERTAINMENT'
    FINANCE = 'FINANCE'
    HOSPITALITY = 'HOSPITALITY'
    HEALTHFITNESS = 'HEALTHFITNESS'
    HEALTHCARE = 'HEALTHCARE'
    INSURANCE = 'INSURANCE'
    LEAD = 'LEAD'
    OTHER = 'OTHER'
    POLITICAL = 'POLITICAL'
    REAL_ESTATE = 'REAL_ESTATE'
    RETAIL = 'RETAIL'
    SEARCH_MARKETING = 'SEARCH_MARKETING'
    TELECOM = 'TELECOM'


class ReceiverPeriodTimeUnit(Enum):
    NANOSECONDS = 'NANOSECONDS'
    MICROSECONDS = 'MICROSECONDS'
    MILLISECONDS = 'MILLISECONDS'
    SECONDS = 'SECONDS'
    MINUTES = 'MINUTES'
    HOURS = 'HOURS'
    DAYS = 'DAYS'


class Status(Enum):
    ACTIVE = 'ACTIVE'
    PENDING_CANCELLED = 'PENDING_CANCELLED'
    CANCELLED = 'CANCELLED'
    ARCHIVED = 'ARCHIVED'


class TrustLevel(Enum):
    LOCKED = 'LOCKED'
    SUSPENDED = 'SUSPENDED'
    PROBATION = 'PROBATION'
    NORMAL = 'NORMAL'
    TRUSTED = 'TRUSTED'


class AddDoNotContactRequest(BaseModel):
    call: Optional[bool] = Field(
        None,
        description='If set to true add all given numbers to Do-Not-Call list. Default value: true',
    )
    inboundCall: Optional[bool] = Field(None, description='~')
    inboundText: Optional[bool] = Field(None, description='~')
    numbers: Optional[List[str]] = Field(
        None,
        description='A list of phone numbers in E.164 format (11-digit), example: 12132000384, 14142777322',
    )
    source: Optional[str] = Field(
        None,
        description='A list of new contact objects which need to be added. Default value: Api V2',
    )
    text: Optional[bool] = Field(
        None,
        description='If set to true add all given numbers to Do-Not-Text list. Default value: true',
    )


class ApiCredential(BaseModel):
    enabled: Optional[bool] = Field(None, description='Is credential enabled')
    id: Optional[int] = Field(None, description='An id of an API credential')
    name: Optional[str] = Field(None, description='A name of an API credential')
    password: Optional[str] = Field(None, description='A password for credential')
    username: Optional[str] = Field(None, description='Username for credential')


class ApiExceptionHandler(BaseModel):
    pass


class ApiValidator(BaseModel):
    exceptionHandler: Optional[ApiExceptionHandler] = None


class AuthBrand(Enum):
    EZTEXTING = 'EZTEXTING'
    CLUBTEXTING = 'CLUBTEXTING'
    GROUPTEXTING = 'GROUPTEXTING'
    TELLMYCELL = 'TELLMYCELL'
    EZ = 'EZ'
    CALLFIRE = 'CALLFIRE'
    TESLA = 'TESLA'


class Status1(Enum):
    NEW = 'NEW'
    VALIDATING = 'VALIDATING'
    ERRORS = 'ERRORS'
    SOURCE_ERROR = 'SOURCE_ERROR'
    ACTIVE = 'ACTIVE'


class Batch(BaseModel):
    broadcastId: Optional[int] = Field(
        None, description='An id of broadcast which batch belongs to'
    )
    created: Optional[int] = Field(
        None,
        description='A date and time when batch was created, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    enabled: Optional[bool] = Field(
        None,
        description='An enabled batch. If batch is disabled its contacts remain undialed/untexted',
    )
    id: Optional[int] = Field(None, description='A id of a batch')
    name: Optional[str] = Field(None, description='A batch name')
    remaining: Optional[int] = Field(
        None, description='A number of contacts remaining undialed/untexted'
    )
    size: Optional[int] = Field(None, description='A total number of contacts in batch')
    status: Optional[Status1] = Field(
        None,
        description='A status of batch (NEW, VALIDATING, ERRORS, SOURCE_ERROR, ACTIVE). NEW - batch is queued for validation; VALIDATING - batch is currently validating; ERRORS - batch is processed, some validation errors occurred; SOURCE_ERROR - if contact source is contact list in CallFire system and it has an error; ACTIVE - batch is processed and ready',
    )


class BillingPlanUsage(BaseModel):
    intervalEnd: Optional[int] = Field(
        None,
        description='End of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    intervalStart: Optional[int] = Field(
        None,
        description='Start of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    remainingPayAsYouGoCredits: Optional[float] = Field(
        None,
        description='Remaining pay as you go credits are rounded to nearest whole value',
    )
    remainingPlanCredits: Optional[float] = Field(
        None,
        description='Remaining credits are rounded to nearest whole value associated with a plan',
    )
    totalRemainingCredits: Optional[float] = Field(
        None,
        description='Total number of remaining credits (remainingPlanCredits + remainingPayAsYouGoCredits)',
    )


class FinalCallResult(Enum):
    LA = 'LA'
    AM = 'AM'
    BUSY = 'BUSY'
    DNC = 'DNC'
    XFER = 'XFER'
    NO_ANS = 'NO_ANS'
    XFER_LEG = 'XFER_LEG'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    CARRIER_ERROR = 'CARRIER_ERROR'
    CARRIER_TEMP_ERROR = 'CARRIER_TEMP_ERROR'
    UNDIALED = 'UNDIALED'
    SD = 'SD'
    POSTPONED = 'POSTPONED'
    ABANDONED = 'ABANDONED'
    SKIPPED = 'SKIPPED'


class State(Enum):
    READY = 'READY'
    SELECTED = 'SELECTED'
    CALLBACK = 'CALLBACK'
    FINISHED = 'FINISHED'
    DISABLED = 'DISABLED'
    SKIPPED = 'SKIPPED'
    DNC = 'DNC'
    DUP = 'DUP'
    INVALID = 'INVALID'
    TIMEOUT = 'TIMEOUT'
    PERIOD_LIMIT = 'PERIOD_LIMIT'
    RESTRICTED_NUMBER = 'RESTRICTED_NUMBER'


class AnsweringMachineConfig(Enum):
    AM_ONLY = 'AM_ONLY'
    AM_AND_LIVE = 'AM_AND_LIVE'
    LIVE_WITH_AMD = 'LIVE_WITH_AMD'
    LIVE_IMMEDIATE = 'LIVE_IMMEDIATE'


class Status2(Enum):
    TEST = 'TEST'
    SETUP = 'SETUP'
    START_PENDING = 'START_PENDING'
    RUNNING = 'RUNNING'
    SCHEDULED = 'SCHEDULED'
    STOPPED = 'STOPPED'
    SUSPENDED = 'SUSPENDED'
    FINISHED = 'FINISHED'
    ARCHIVED = 'ARCHIVED'
    VALIDATING_START = 'VALIDATING_START'
    VALIDATING_EMAIL = 'VALIDATING_EMAIL'
    BLOCKED_SUSPICIOUS = 'BLOCKED_SUSPICIOUS'
    DECLINED = 'DECLINED'
    APPROVED = 'APPROVED'


class DncSoundTextVoice(Enum):
    MALE1 = 'MALE1'
    FEMALE1 = 'FEMALE1'
    FEMALE2 = 'FEMALE2'
    SPANISH1 = 'SPANISH1'
    FRENCHCANADIAN1 = 'FRENCHCANADIAN1'


class LiveSoundTextVoice(Enum):
    MALE1 = 'MALE1'
    FEMALE1 = 'FEMALE1'
    FEMALE2 = 'FEMALE2'
    SPANISH1 = 'SPANISH1'
    FRENCHCANADIAN1 = 'FRENCHCANADIAN1'


class MachineSoundTextVoice(Enum):
    MALE1 = 'MALE1'
    FEMALE1 = 'FEMALE1'
    FEMALE2 = 'FEMALE2'
    SPANISH1 = 'SPANISH1'
    FRENCHCANADIAN1 = 'FRENCHCANADIAN1'


class TransferSoundTextVoice(Enum):
    MALE1 = 'MALE1'
    FEMALE1 = 'FEMALE1'
    FEMALE2 = 'FEMALE2'
    SPANISH1 = 'SPANISH1'
    FRENCHCANADIAN1 = 'FRENCHCANADIAN1'


class CallBroadcastSounds(BaseModel):
    dncDigit: Optional[str] = Field(
        None, description='Digit pressed to place contact in DNC list'
    )
    dncSoundId: Optional[int] = Field(
        None,
        description='An id of sound file to play when recipient decided to opt out and pressed DNC digit',
    )
    dncSoundText: Optional[str] = Field(
        None,
        description='Text to be turned into sound, plays to notify that Do Not Call digit has been pressed and inform your contact of their placement on the Do Not Call list',
    )
    dncSoundTextVoice: Optional[DncSoundTextVoice] = Field(
        None,
        description='The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)',
    )
    liveSoundId: Optional[int] = Field(
        None, description='An id of sound file to play if phone is answered'
    )
    liveSoundText: Optional[str] = Field(
        None,
        description='Text to be used to turned into a sound. This text will be played when the phone is answered',
    )
    liveSoundTextVoice: Optional[LiveSoundTextVoice] = Field(
        None,
        description='The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a live sound',
    )
    machineSoundId: Optional[int] = Field(
        None,
        description='An id of a sound file to play if answering machine is detected',
    )
    machineSoundText: Optional[str] = Field(
        None,
        description='Text to be turned into a sound. This text will be played when answering machine is detected',
    )
    machineSoundTextVoice: Optional[MachineSoundTextVoice] = Field(
        None,
        description='The voice to be used (MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1) for a machine sound',
    )
    transferDigit: Optional[str] = Field(
        None, description='Digit pressed to initiate a transfer'
    )
    transferNumber: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit) to transfer call to.  Example: 12132000384, 67076',
    )
    transferSoundId: Optional[int] = Field(
        None, description='An id of a file to play if call is transferred'
    )
    transferSoundText: Optional[str] = Field(
        None,
        description='Text to be turned into a sound. This text will be played when the transfer digit is played',
    )
    transferSoundTextVoice: Optional[TransferSoundTextVoice] = Field(
        None,
        description='The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a sound transfer',
    )


class CallBroadcastStats(BaseModel):
    answeringMachineCount: Optional[int] = Field(None, description='~')
    billedAmount: Optional[float] = Field(None, description='~')
    billedDuration: Optional[int] = Field(None, description='~')
    busyCount: Optional[int] = Field(None, description='~')
    callsAttempted: Optional[int] = Field(None, description='~')
    callsAwaitingRedial: Optional[int] = Field(None, description='~')
    callsDuration: Optional[int] = Field(None, description='~')
    callsLiveAnswer: Optional[int] = Field(None, description='~')
    callsPlaced: Optional[int] = Field(None, description='~')
    callsRemaining: Optional[int] = Field(None, description='~')
    dialedCount: Optional[int] = Field(None, description='~')
    doNotCallCount: Optional[int] = Field(None, description='~')
    errorCount: Optional[int] = Field(None, description='~')
    liveCount: Optional[int] = Field(None, description='~')
    miscCount: Optional[int] = Field(None, description='~')
    noAnswerCount: Optional[int] = Field(None, description='~')
    remainingOutboundCount: Optional[int] = Field(None, description='~')
    responseRatePercent: Optional[int] = Field(None, description='~')
    totalCount: Optional[int] = Field(None, description='~')
    totalOutboundCount: Optional[int] = Field(None, description='~')
    transferCount: Optional[int] = Field(None, description='~')


class CallCreateSound(BaseModel):
    name: Optional[str] = Field(None, description='Name of a sound to create')
    toNumber: Optional[str] = Field(
        None,
        description='Phone number in E.164 11-digit format to call to record a sound.  Example: 12132000384',
    )


class Voice(Enum):
    MALE1 = 'MALE1'
    FEMALE1 = 'FEMALE1'
    FEMALE2 = 'FEMALE2'
    SPANISH1 = 'SPANISH1'
    FRENCHCANADIAN1 = 'FRENCHCANADIAN1'


class CallRecipient(BaseModel):
    attributes: Optional[Dict[str, str]] = Field(
        None,
        description='Map of user-defined string attributes associated with recipient',
    )
    contactId: Optional[int] = Field(
        None, description='An id of existing contact used as recipient'
    )
    dialplanXml: Optional[str] = Field(
        None,
        description='An IVR xml document describing dialplan to setup an IVR broadcast. If dialplan is set there is no need to set live, machine and transfer sounds (or vice versa)',
    )
    fromNumber: Optional[str] = Field(None, description='~')
    liveMessage: Optional[str] = Field(
        None,
        description='Text to be turned into a sound, this text will be played when the phone is answered',
    )
    liveMessageSoundId: Optional[int] = Field(
        None, description='An id of a sound file to play if phone is answered'
    )
    machineMessage: Optional[str] = Field(
        None,
        description='Text to be used to turn into sound, this text will be played when answering machine is detected',
    )
    machineMessageSoundId: Optional[int] = Field(
        None,
        description='An id of a sound file to play if answering machine is detected',
    )
    phoneNumber: Optional[str] = Field(
        None,
        description="Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384",
    )
    transferDigit: Optional[str] = Field(
        None, description='A digit pressed to initiate the transfer'
    )
    transferMessage: Optional[str] = Field(
        None,
        description='Text to be turned into sound, this text will be played when the transfer digit is played',
    )
    transferMessageSoundId: Optional[int] = Field(
        None, description='An id of a sound file to play if call is transferred'
    )
    transferNumber: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit) to transfer the call to. Example: 12132000384',
    )
    voice: Optional[Voice] = Field(
        None,
        description='The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)',
    )


class Result(Enum):
    LA = 'LA'
    AM = 'AM'
    BUSY = 'BUSY'
    DNC = 'DNC'
    XFER = 'XFER'
    NO_ANS = 'NO_ANS'
    XFER_LEG = 'XFER_LEG'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    CARRIER_ERROR = 'CARRIER_ERROR'
    CARRIER_TEMP_ERROR = 'CARRIER_TEMP_ERROR'
    UNDIALED = 'UNDIALED'
    SD = 'SD'
    POSTPONED = 'POSTPONED'
    ABANDONED = 'ABANDONED'
    SKIPPED = 'SKIPPED'


class State1(Enum):
    RECORDING = 'RECORDING'
    READY = 'READY'
    ERROR = 'ERROR'


class CallRecording(BaseModel):
    callId: Optional[int] = Field(None, description='An id of a call action')
    campaignId: Optional[int] = Field(
        None,
        description='Contains broadcast id if call was sent as a part of voice broadcast',
    )
    created: Optional[int] = Field(
        None,
        description='The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    hash: Optional[str] = Field(
        None, description='A unique string hash identifier of a recording'
    )
    id: Optional[int] = Field(None, description='An id of a call recording')
    lengthInBytes: Optional[int] = Field(
        None, description='A size of a recording file in bytes'
    )
    lengthInSeconds: Optional[int] = Field(
        None, description='Duration of a recording in seconds'
    )
    mp3Url: Optional[str] = Field(None, description='A public URL of a call recording')
    name: Optional[str] = Field(None, description='A name of a recording')
    state: Optional[State1] = Field(
        None,
        description='Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken',
    )


class CallerId(BaseModel):
    phoneNumber: Optional[str] = Field(None, description='~')


class CallerIdVerificationRequest(BaseModel):
    verificationCode: Optional[str] = Field(
        None, description='The code used to verify a caller id number'
    )


class Status3(Enum):
    UPLOAD = 'UPLOAD'
    RECORDING = 'RECORDING'
    ACTIVE = 'ACTIVE'
    ACTIVE_SYSTEM = 'ACTIVE_SYSTEM'
    FAILED = 'FAILED'
    ARCHIVED = 'ARCHIVED'
    SCRUBBED = 'SCRUBBED'


class CampaignSound(BaseModel):
    created: Optional[int] = Field(
        None,
        description='The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    duplicate: Optional[bool] = Field(
        None,
        description='True if the same sound file exists in a sound library of account',
    )
    id: Optional[int] = Field(None, description='An id of a sound file')
    lengthInSeconds: Optional[int] = Field(
        None, description='Length of a sound in seconds'
    )
    name: Optional[str] = Field(None, description='A name of a sound file')
    status: Optional[Status3] = Field(
        None,
        description='A current status of a sound, available values: UPLOAD - uploading is in progress, RECORDING - recording of sound is in progress, ACTIVE - sound is ready, FAILED, ARCHIVED - sound was archived, SCRUBBED - sound was scrubbed ',
    )


class Contact(BaseModel):
    deleted: Optional[bool] = Field(
        None,
        description='A deleted contact, deleted contacts are hidden from search results',
    )
    externalId: Optional[str] = Field(
        None,
        description='An external id of a contact for syncing with external sources',
    )
    externalSystem: Optional[str] = Field(
        None, description='External system that external id refers to'
    )
    extraPhone1: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit). Example: 12132000384',
    )
    extraPhone2: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit). Example: 12132000384',
    )
    extraPhone3: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit). Example: 12132000384',
    )
    firstName: Optional[str] = Field(None, description='A first name of a contact')
    homePhone: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit). Example: 12132000384',
    )
    id: Optional[int] = Field(None, description='An id of a contact')
    lastName: Optional[str] = Field(None, description='A last name of a contact')
    mobilePhone: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit). Example: 12132000384',
    )
    properties: Optional[Dict[str, str]] = Field(
        None, description='Map of user-defined string properties for contact'
    )
    workPhone: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit). Example: 12132000384',
    )
    zipcode: Optional[str] = Field(None, description='A Zip code of a contact')


class Status4(Enum):
    ACTIVE = 'ACTIVE'
    VALIDATING = 'VALIDATING'
    IMPORTING = 'IMPORTING'
    IMPORT_FAILED = 'IMPORT_FAILED'
    ERRORS = 'ERRORS'
    DELETED = 'DELETED'
    PARSE_FAILED = 'PARSE_FAILED'
    COLUMN_TOO_LARGE = 'COLUMN_TOO_LARGE'


class ContactList(BaseModel):
    created: Optional[int] = Field(
        None,
        description='A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    id: Optional[int] = Field(None, description='An Id of a contact list')
    name: Optional[str] = Field(None, description='A name of a contact list')
    size: Optional[int] = Field(
        None, description='A number of contacts in a contact list'
    )
    status: Optional[Status4] = Field(
        None,
        description='A current status of a contact list, available values: ACTIVE - contact list is ready, VALIDATING - contact list validation is in progress, IMPORTING - importing is in progress, IMPORT_FAILED - in case of errors occurred during the importing, ERRORS - contact list has validation errors, DELETED - contact list was deleted, PARSE_FAILED - contacts cannot be parsed, COLUMN_TOO_LARGE - if size of phone number or any other column exceeds 255 characters',
    )


class CreateContactListRequest(BaseModel):
    contactIds: Optional[List[int]] = Field(
        None, description='A list of ids of existing contacts in CallFire system'
    )
    contactNumbers: Optional[List[str]] = Field(
        None,
        description='List of numbers in E.164 format (11-digit). Example: 12132000384',
    )
    contactNumbersField: Optional[str] = Field(
        None,
        description='A type of a phone number (homePhone, workPhone, mobilePhone). This parameter is used with contactNumbers and specifies which types of phone numbers are included to a contact list',
    )
    contacts: Optional[List[Contact]] = Field(
        None, description='A list of new contact objects to be added'
    )
    name: Optional[str] = Field(None, description='A name of a contact list')
    useCustomFields: Optional[bool] = Field(
        None,
        description='A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc',
    )


class CreditUsage(BaseModel):
    callsDurationMinutes: Optional[int] = Field(
        None, description='Sum of calls duration rounded to nearest whole minute'
    )
    creditsUsed: Optional[float] = Field(
        None, description='Total credits used calls and texts.'
    )
    intervalBegin: Optional[int] = Field(
        None,
        description='Start of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    intervalEnd: Optional[int] = Field(
        None,
        description='End of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    textsSent: Optional[int] = Field(None, description='Number of texts sent')


class DateTimeZone(BaseModel):
    fixed: Optional[bool] = Field(None, description='~')
    id: Optional[str] = Field(None, description='~')


class DeliveryCategory(Enum):
    NO_DATA = 'NO_DATA'
    OPTED_OUT = 'OPTED_OUT'
    BOUNCED = 'BOUNCED'
    NO_CREDITS = 'NO_CREDITS'
    DELIVERED = 'DELIVERED'


class DeliveryState(Enum):
    DELIVERED = 'DELIVERED'
    UNSENT_OPTED_OUT_GLOBAL = 'UNSENT_OPTED_OUT_GLOBAL'
    UNSENT_OPTED_OUT_LOCAL = 'UNSENT_OPTED_OUT_LOCAL'
    UNSENT_NO_CREDITS = 'UNSENT_NO_CREDITS'
    GATEWAY_REJECTED = 'GATEWAY_REJECTED'
    CARRIER_REJECTED = 'CARRIER_REJECTED'
    NOT_DELIVERED = 'NOT_DELIVERED'
    UNSENT_INVALID_NUMBER = 'UNSENT_INVALID_NUMBER'
    UNSENT_BAD_DATA = 'UNSENT_BAD_DATA'
    UNSENT_FORCE_STOPPED = 'UNSENT_FORCE_STOPPED'
    UNSENT_PERIOD_LIMIT = 'UNSENT_PERIOD_LIMIT'
    UNSENT_INTERNATIONAL = 'UNSENT_INTERNATIONAL'
    UNSENT_INVALID_TIMEZONE_OR_DNC = 'UNSENT_INVALID_TIMEZONE_OR_DNC'
    UNSENT_ALREADY_SCRUBBED = 'UNSENT_ALREADY_SCRUBBED'
    UNSENT_SYSTEM_ERROR = 'UNSENT_SYSTEM_ERROR'
    UNSENT_NO_WIRELESS_CARRIER = 'UNSENT_NO_WIRELESS_CARRIER'
    UNSENT_MESSAGE_TOO_LONG = 'UNSENT_MESSAGE_TOO_LONG'
    UNSENT_MESSAGE_BLOCKED = 'UNSENT_MESSAGE_BLOCKED'
    UNSENT_QUEUE_LIMIT_REACHED = 'UNSENT_QUEUE_LIMIT_REACHED'
    UNSENT_TOKEN_LIMIT_REACHED = 'UNSENT_TOKEN_LIMIT_REACHED'
    UNSENT_TIME_LIMIT_REACHED = 'UNSENT_TIME_LIMIT_REACHED'
    UNSENT_SCHEDULER_CAPACITY_EXCEEDED = 'UNSENT_SCHEDULER_CAPACITY_EXCEEDED'
    SPAM_DETECTED = 'SPAM_DETECTED'
    UNSENT_NO_GATEWAY = 'UNSENT_NO_GATEWAY'
    UNSENT_DAILY_LIMIT_REACHED = 'UNSENT_DAILY_LIMIT_REACHED'
    ORIGINATED = 'ORIGINATED'
    SUBMITTED = 'SUBMITTED'
    FORWARDED = 'FORWARDED'
    NOT_GIVEN = 'NOT_GIVEN'
    UNKNOWN = 'UNKNOWN'
    RETRY_MMS_AS_SMS = 'RETRY_MMS_AS_SMS'
    QUEUED = 'QUEUED'
    QUEUED_TRANSCODE = 'QUEUED_TRANSCODE'
    ORIGINAL = 'ORIGINAL'
    DUPE = 'DUPE'
    TRUNCATED = 'TRUNCATED'
    REQUEUED_RATE_LIMITED = 'REQUEUED_RATE_LIMITED'
    BUFFERED = 'BUFFERED'
    RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED'
    SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE'
    SEND_MMS_AS_SMS = 'SEND_MMS_AS_SMS'
    REQUEUED_RECOVERABLE_ERROR = 'REQUEUED_RECOVERABLE_ERROR'
    SEND_WITH_ADDITIONAL_SPID = 'SEND_WITH_ADDITIONAL_SPID'
    UNSENT_FREE_TRIAL = 'UNSENT_FREE_TRIAL'


class DeliveryReport(BaseModel):
    campaignId: Optional[int] = Field(None, description='~')
    carrier: Optional[str] = Field(None, description='~')
    deliveryCategory: Optional[DeliveryCategory] = Field(None, description='~')
    deliveryState: Optional[DeliveryState] = Field(None, description='~')
    fromNumber: Optional[str] = Field(None, description='~')
    messageText: Optional[str] = Field(None, description='~')
    toNumber: Optional[str] = Field(None, description='~')
    updated: Optional[datetime] = Field(None, description='~')


class DoNotContact(BaseModel):
    call: Optional[bool] = Field(None, description='A number on Do-Not-Call list')
    campaignId: Optional[int] = Field(
        None,
        description='An Id of a campaign which was used to send a message to DNC number',
    )
    created: Optional[int] = Field(
        None,
        description='A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    inboundCall: Optional[bool] = Field(None, description='~')
    inboundText: Optional[bool] = Field(None, description='~')
    number: Optional[str] = Field(
        None,
        description='A single DNC number in E.164 format (11-digit). Example: 12132000384',
    )
    source: Optional[str] = Field(
        None,
        description='The name of DNC source (can be the name of DNC list that user uploads to CallFire)',
    )
    text: Optional[bool] = Field(None, description='A number on Do-Not-Text list')


class Duration(BaseModel):
    millis: Optional[int] = Field(None, description='~')
    standardDays: Optional[int] = Field(None, description='~')
    standardHours: Optional[int] = Field(None, description='~')
    standardMinutes: Optional[int] = Field(None, description='~')
    standardSeconds: Optional[int] = Field(None, description='~')


class ErrorResponse(BaseModel):
    developerMessage: Optional[str] = Field(None, description='~')
    helpLink: Optional[str] = Field(None, description='~')
    httpStatusCode: Optional[int] = Field(None, description='~')
    internalCode: Optional[str] = Field(None, description='~')
    message: Optional[str] = Field(None, description='~')


class GoogleAnalytics(BaseModel):
    category: Optional[str] = Field(
        None, description='A category to group. For example: Sales or Support'
    )
    domain: Optional[str] = Field(None, description='A domain name for analytics')
    googleAccountId: Optional[str] = Field(
        None, description='An id of a Google account, example: UA-XXXXX-2X'
    )


class InputStream(BaseModel):
    pass


class ItemList(BaseModel):
    items: Optional[List[Dict[str, Any]]] = Field(None, description='~')


class IvrInboundConfig(BaseModel):
    dialplanXml: Optional[str] = Field(None, description='~')


class Keyword(BaseModel):
    keyword: Optional[str] = Field(None, description='~')
    number: Optional[str] = Field(None, description='~')
    shortCode: Optional[str] = Field(None, description='~')


class Status5(Enum):
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    RELEASED = 'RELEASED'
    UNAVAILABLE = 'UNAVAILABLE'


class KeywordLease(BaseModel):
    autoRenew: Optional[bool] = Field(
        None,
        description='Enables the auto renewal of a keyword lease at the end of each billing cycle',
    )
    contactListId: Optional[int] = Field(None, description='Existing contact list ID')
    doubleOptInEnabled: Optional[bool] = Field(
        None, description='Enable/disable double opt in feature'
    )
    keyword: Optional[str] = Field(None, description='A text used as a keyword')
    labels: Optional[List[str]] = Field(None, description='~')
    leaseBegin: Optional[int] = Field(
        None,
        description='A time of a lease timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    leaseEnd: Optional[int] = Field(
        None,
        description='A date and time when the keyword lease is finishes. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )
    number: Optional[str] = Field(
        None, description='A number assigned to keyword. Example: 12132212344'
    )
    optInConfirmationMessage: Optional[str] = Field(
        None, description='Opt in confirmation message'
    )
    shortCode: Optional[str] = Field(
        None,
        description='A short code assigned to keyword. Example: 67076 (Deprecated - please use number instead)',
    )
    status: Optional[Status5] = Field(
        None,
        description='A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE',
    )
    type: Optional[Type] = Field(None, description='~')


class KeywordList(ItemList):
    items: Optional[List[Keyword]] = None


class KeywordPurchaseRequest(BaseModel):
    keywords: Optional[List[str]] = Field(None, description='A list of keywords')


class LocalDate(BaseModel):
    day: Optional[int] = Field(
        None, description='A day of the month. Available values: 1-31'
    )
    month: Optional[int] = Field(
        None, description='A month of the year. Available values: 1-12'
    )
    year: Optional[int] = Field(None, description='A year. Example: 2020')


class LocalTime(BaseModel):
    hour: Optional[int] = Field(
        None, description='An hour of the day. Available values: 0-23'
    )
    minute: Optional[int] = Field(
        None, description='The minutes. Available values: 0-59'
    )
    nano: Optional[int] = Field(None, description='~')
    second: Optional[int] = Field(
        None, description='The seconds.  Available values: 0-59'
    )


class LocalTimeRestriction(BaseModel):
    beginHour: Optional[int] = Field(None, description='An hour of restriction start')
    beginMinute: Optional[int] = Field(
        None, description='The minutes to start a restriction'
    )
    enabled: Optional[bool] = Field(None, description='A restriction enabled')
    endHour: Optional[int] = Field(None, description='An hour of restriction end')
    endMinute: Optional[int] = Field(None, description='The minutes of restriction end')


class LocalTimeZoneRestriction(BaseModel):
    enabled: Optional[bool] = Field(None, description='~')
    startTime: Optional[datetime] = Field(None, description='~')
    stopTime: Optional[datetime] = Field(None, description='~')


class Locale(BaseModel):
    country: Optional[str] = Field(None, description='~')
    displayCountry: Optional[str] = Field(None, description='~')
    displayLanguage: Optional[str] = Field(None, description='~')
    displayName: Optional[str] = Field(None, description='~')
    displayScript: Optional[str] = Field(None, description='~')
    displayVariant: Optional[str] = Field(None, description='~')
    extensionKeys: Optional[List[str]] = Field(None, description='~')
    iso3Country: Optional[str] = Field(None, description='~')
    iso3Language: Optional[str] = Field(None, description='~')
    language: Optional[str] = Field(None, description='~')
    script: Optional[str] = Field(None, description='~')
    unicodeLocaleAttributes: Optional[List[str]] = Field(None, description='~')
    unicodeLocaleKeys: Optional[List[str]] = Field(None, description='~')
    variant: Optional[str] = Field(None, description='~')


class State2(Enum):
    ACTIVE = 'ACTIVE'
    PENDING = 'PENDING'
    PENDING_VERIFICATION = 'PENDING_VERIFICATION'
    IN_REVIEW = 'IN_REVIEW'


class ManagedAccountDto(BaseModel):
    accountHolderId: Optional[str] = Field(None, description='~')
    credits: Optional[float] = Field(None, description='~')
    email: Optional[str] = Field(None, description='~')
    id: Optional[str] = Field(None, description='~')
    lastLogin: Optional[datetime] = Field(None, description='~')
    name: Optional[str] = Field(None, description='~')
    state: Optional[State2] = Field(None, description='~')


class Media(BaseModel):
    accountId: Optional[int] = Field(None, description='~')
    created: Optional[int] = Field(
        None,
        description='The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 ',
    )
    id: Optional[int] = Field(None, description='An id of a media file')
    lengthInBytes: Optional[int] = Field(
        None, description='A size of a media file in bytes'
    )
    mediaType: Optional[str] = Field(
        None,
        description='A MIME type of media file, ex: image/jpeg, image/png, video/mp4, audio/mp3, etc',
    )
    name: Optional[str] = Field(None, description='A name of a media file')
    publicUrl: Optional[str] = Field(None, description='A public URL of a media file')


class MediaPage(BaseModel):
    items: Optional[List[Media]] = Field(None, description='~')
    limit: Optional[int] = Field(None, description='~')
    offset: Optional[int] = Field(None, description='~')
    totalCount: Optional[int] = Field(None, description='~')


class MessageTemplateCategory(BaseModel):
    id: Optional[int] = Field(None, description='~')
    name: Optional[str] = Field(None, description='~')


class Note(BaseModel):
    created: Optional[int] = Field(
        None,
        description='The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )
    text: Optional[str] = Field(None, description='A text of a note')


class ConfigType(Enum):
    IVR = 'IVR'
    TRACKING = 'TRACKING'


class CallFeatureStatus(Enum):
    UNSUPPORTED = 'UNSUPPORTED'
    PENDING = 'PENDING'
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class TextFeatureStatus(Enum):
    UNSUPPORTED = 'UNSUPPORTED'
    PENDING = 'PENDING'
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class Status7(Enum):
    PROCESSING = 'PROCESSING'
    FINISHED = 'FINISHED'
    PAYMENT_ERROR = 'PAYMENT_ERROR'
    VOID = 'VOID'
    WAIT_FOR_PAYMENT = 'WAIT_FOR_PAYMENT'
    PARTIALLY_ADJUSTED = 'PARTIALLY_ADJUSTED'
    ADJUSTED = 'ADJUSTED'
    NEW = 'NEW'
    ERRORED = 'ERRORED'
    APPROVE_TIER_ONE = 'APPROVE_TIER_ONE'
    APPROVE_TIER_TWO = 'APPROVE_TIER_TWO'
    REJECTED = 'REJECTED'


class NumberOrderItem(BaseModel):
    fulfilled: Optional[List[str]] = Field(
        None, description='List of fulfilled items, e.g. phone numbers, keywords'
    )
    ordered: Optional[int] = Field(
        None, description='A total number of items bought within a single order item'
    )
    unitCost: Optional[float] = Field(None, description='A cost of unit')


class NumberPurchaseRequest(BaseModel):
    city: Optional[str] = Field(None, description='City of requested numbers')
    localCount: Optional[int] = Field(
        None, description='Total count of local numbers requested'
    )
    numbers: Optional[List[str]] = Field(
        None,
        description='A list of phone numbers in E.164 format (11-digit) to buy. Example: 12132000384',
    )
    prefix: Optional[str] = Field(
        None, description='Country prefix of requested numbers'
    )
    promo: Optional[str] = Field(None, description='~')
    state: Optional[str] = Field(
        None, description='A two-letter state code of requested numbers'
    )
    tollFreeCount: Optional[int] = Field(
        None, description='Total count of toll-free numbers requested'
    )
    zipcode: Optional[str] = Field(
        None, description='A five-digit Zip code of requested numbers'
    )


class GrantType(Enum):
    AUTHORIZATION_CODE = 'AUTHORIZATION_CODE'
    PASSWORD = 'PASSWORD'
    REFRESH_TOKEN = 'REFRESH_TOKEN'
    CLIENT_CREDENTIALS = 'CLIENT_CREDENTIALS'
    JWT_BEARER = 'JWT_BEARER'
    IMPERSONATE = 'IMPERSONATE'
    EXCHANGE = 'EXCHANGE'


class OAuthSession(BaseModel):
    accountId: Optional[str] = Field(None, description='~')
    actor: Optional[OAuthSession] = None
    brand: Optional[Brand] = Field(None, description='~')
    clientId: Optional[str] = Field(None, description='~')
    email: Optional[str] = Field(None, description='~')
    expires: Optional[datetime] = Field(None, description='~')
    grantType: Optional[GrantType] = Field(None, description='~')
    id: Optional[str] = Field(None, description='~')
    ipAddress: Optional[str] = Field(None, description='~')
    issued: Optional[datetime] = Field(None, description='~')
    scope: Optional[str] = Field(None, description='~')
    sid: Optional[int] = Field(None, description='~')
    userId: Optional[str] = Field(None, description='~')
    username: Optional[str] = Field(None, description='~')
    verificationRequired: Optional[bool] = Field(None, description='~')


class Page(BaseModel):
    items: Optional[List[Dict[str, Any]]] = Field(
        None, description='A list of returned items'
    )
    limit: Optional[int] = Field(
        None,
        description='A maximum number of returned items. If items.size() < limit assume no more items',
    )
    offset: Optional[int] = Field(
        None, description='An offset from a start of paging source'
    )
    totalCount: Optional[int] = Field(
        None, description='Total count of available results. -1 if unknown'
    )


class PageDeliveryReport(BaseModel):
    items: Optional[List[DeliveryReport]] = Field(None, description='~')
    limit: Optional[int] = Field(None, description='~')
    offset: Optional[int] = Field(None, description='~')
    totalCount: Optional[int] = Field(None, description='~')


class PageKeywordLease(BaseModel):
    items: Optional[List[KeywordLease]] = Field(None, description='~')
    limit: Optional[int] = Field(None, description='~')
    offset: Optional[int] = Field(None, description='~')
    totalCount: Optional[int] = Field(None, description='~')


class QuestionResponse(BaseModel):
    question: Optional[str] = Field(None, description='A text of a question')
    response: Optional[str] = Field(None, description="Client's answer")


class Recipient(BaseModel):
    attributes: Optional[Dict[str, str]] = Field(
        None,
        description='Map of user-defined string attributes associated with recipient',
    )
    contactId: Optional[int] = Field(
        None, description='An id of existing contact used as recipient'
    )
    fromNumber: Optional[str] = Field(None, description='~')
    phoneNumber: Optional[str] = Field(
        None,
        description="A recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076",
    )


class Region(BaseModel):
    city: Optional[str] = Field(None, description='A city of a region')
    country: Optional[str] = Field(None, description='A country of a region')
    latitude: Optional[float] = Field(None, description='A latitude of a region')
    longitude: Optional[float] = Field(None, description='A longitude of a region')
    prefix: Optional[str] = Field(
        None, description='A country prefix of a region. 4-7 digit'
    )
    state: Optional[str] = Field(None, description='A two-letter state code of region')
    timeZone: Optional[str] = Field(None, description='A timezone of a region')
    zipcode: Optional[str] = Field(
        None, description='A five-digit zip code of a region'
    )


class RegionPage(Page):
    items: Optional[List[Region]] = None


class ResourceId(BaseModel):
    id: Optional[int] = Field(None, description='An id of a resource')


class ResourceIdList(ItemList):
    items: Optional[List[ResourceId]] = None


class RetryConfig(BaseModel):
    maxAttempts: Optional[int] = Field(
        None, description='Maximum number of retry attempts. Default value: 1'
    )
    minutesBetweenAttempts: Optional[int] = Field(
        None,
        description='A number of minutes between retry attempts. Default value: 60',
    )
    retryPhoneTypes: Optional[List[str]] = Field(
        None,
        description='A list of phone number types to retry. Available values: FIRST_NUMBER, HOME_PHONE, WORK_PHONE, MOBILE_PHONE',
    )
    retryResults: Optional[List[str]] = Field(
        None,
        description='List of result states when a call/text should be addressed to this contact again. Supports any combination of result statuses. Available values: LA, BUSY, AM, NO_ANS, SENT, RECEIVED, etc. See [call/text states and results](https://developers.callfire.com/results-responses-errors.html)',
    )


class Schedule(BaseModel):
    campaignId: Optional[int] = Field(None, description='~')
    daysOfWeek: Optional[List[str]] = Field(None, description='~')
    id: Optional[int] = Field(None, description='~')
    startDate: Optional[LocalDate] = None
    startTimeOfDay: Optional[LocalTime] = None
    stopDate: Optional[LocalDate] = None
    stopTimeOfDay: Optional[LocalTime] = None
    timeZone: Optional[str] = Field(None, description='~')


class StreamingOutput(BaseModel):
    pass


class StringList(ItemList):
    items: Optional[List[str]] = None


class TemporalUnit(BaseModel):
    dateBased: Optional[bool] = Field(None, description='~')
    duration: Optional[Duration] = None
    durationEstimated: Optional[bool] = Field(None, description='~')
    timeBased: Optional[bool] = Field(None, description='~')


class FinalTextResult(Enum):
    SENT = 'SENT'
    RECEIVED = 'RECEIVED'
    DNT = 'DNT'
    TOO_BIG = 'TOO_BIG'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    CARRIER_ERROR = 'CARRIER_ERROR'
    CARRIER_TEMP_ERROR = 'CARRIER_TEMP_ERROR'
    UNDIALED = 'UNDIALED'
    INVALID_NUMBER = 'INVALID_NUMBER'


class State3(Enum):
    READY = 'READY'
    SELECTED = 'SELECTED'
    CALLBACK = 'CALLBACK'
    FINISHED = 'FINISHED'
    DISABLED = 'DISABLED'
    SKIPPED = 'SKIPPED'
    DNC = 'DNC'
    DUP = 'DUP'
    INVALID = 'INVALID'
    TIMEOUT = 'TIMEOUT'
    PERIOD_LIMIT = 'PERIOD_LIMIT'
    RESTRICTED_NUMBER = 'RESTRICTED_NUMBER'


class TextAutoReply(BaseModel):
    id: Optional[int] = Field(None, description='An id of a text auto reply')
    keyword: Optional[str] = Field(
        None, description='Setup autoreply for a given keyword'
    )
    match: Optional[str] = Field(
        None,
        description='Text to match. If it is set then autoreply will be sent to a person who texted message with matched text. Case insensitive, if parameter is not specified then all texts will be matched',
    )
    message: Optional[str] = Field(
        None, description='A text message to return as an auto reply'
    )
    number: Optional[str] = Field(
        None,
        description='Setup autoreply for a given phone number, E.164 format (11-digit). Example: 12132000384',
    )


class TextAutoReplyPage(Page):
    items: Optional[List[TextAutoReply]] = None


class BigMessageStrategy(Enum):
    SEND_MULTIPLE = 'SEND_MULTIPLE'
    DO_NOT_SEND = 'DO_NOT_SEND'
    TRIM = 'TRIM'
    MMS = 'MMS'


class Status8(Enum):
    TEST = 'TEST'
    SETUP = 'SETUP'
    START_PENDING = 'START_PENDING'
    RUNNING = 'RUNNING'
    SCHEDULED = 'SCHEDULED'
    STOPPED = 'STOPPED'
    SUSPENDED = 'SUSPENDED'
    FINISHED = 'FINISHED'
    ARCHIVED = 'ARCHIVED'
    VALIDATING_START = 'VALIDATING_START'
    VALIDATING_EMAIL = 'VALIDATING_EMAIL'
    BLOCKED_SUSPICIOUS = 'BLOCKED_SUSPICIOUS'
    DECLINED = 'DECLINED'
    APPROVED = 'APPROVED'


class TextBroadcastCreateResponse(BaseModel):
    id: Optional[int] = Field(None, description='~')


class TextBroadcastStatsDto(BaseModel):
    billedAmount: Optional[float] = Field(None, description='~')
    doNotTextCount: Optional[int] = Field(None, description='~')
    errorCount: Optional[int] = Field(None, description='~')
    recievedCount: Optional[int] = Field(None, description='~')
    remainingOutboundCount: Optional[int] = Field(None, description='~')
    sentCount: Optional[int] = Field(None, description='~')
    tooBigCount: Optional[int] = Field(None, description='~')
    totalOutboundCount: Optional[int] = Field(None, description='~')
    unsentCount: Optional[int] = Field(None, description='~')


class TextInboundConfig(BaseModel):
    forwardEnabled: Optional[bool] = Field(None, description='~')
    forwardNumber: Optional[str] = Field(None, description='~')


class TextRecipient(BaseModel):
    attributes: Optional[Dict[str, str]] = Field(
        None, description='A map of string attributes associated with a recipient'
    )
    contactId: Optional[int] = Field(
        None, description='An id of existing contact in account'
    )
    fromNumber: Optional[str] = Field(None, description='~')
    media: Optional[List[Media]] = Field(
        None, description="A list of media objects' ids associated with a text message"
    )
    message: Optional[str] = Field(None, description='A text message')
    phoneNumber: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076',
    )


class TextResult(Enum):
    SENT = 'SENT'
    RECEIVED = 'RECEIVED'
    DNT = 'DNT'
    TOO_BIG = 'TOO_BIG'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    CARRIER_ERROR = 'CARRIER_ERROR'
    CARRIER_TEMP_ERROR = 'CARRIER_TEMP_ERROR'
    UNDIALED = 'UNDIALED'
    INVALID_NUMBER = 'INVALID_NUMBER'


class TextRecord(BaseModel):
    billedAmount: Optional[float] = Field(None, description='A cost of a sent text')
    callerName: Optional[str] = Field(None, description='~')
    finishTime: Optional[int] = Field(
        None,
        description='A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )
    id: Optional[int] = Field(None, description='An id of a text record')
    labels: Optional[List[str]] = Field(
        None, description='Labels associated with a text action'
    )
    message: Optional[str] = Field(None, description='A text message')
    switchId: Optional[str] = Field(None, description='~')
    textResult: Optional[TextResult] = Field(
        None,
        description='Result of a text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)',
    )
    toNumber: Optional[str] = Field(None, description='An attempted phone number')


class TextToSpeech(BaseModel):
    message: Optional[str] = Field(None, description='A text to be turned into sound')
    voice: Optional[Voice] = Field(
        None,
        description='A voice to be used. Available values: MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1',
    )


class TimeZone(BaseModel):
    displayName: Optional[str] = Field(None, description='~')
    dstsavings: Optional[int] = Field(None, description='~')
    id: Optional[str] = Field(None, description='~')
    rawOffset: Optional[int] = Field(None, description='~')


class UniversalDoNotContact(BaseModel):
    fromNumber: Optional[str] = Field(
        None,
        description='Optional source number in E.164 format (11-digit). Example: 12132000384',
    )
    inboundCall: Optional[bool] = Field(
        None,
        description='If toNumber can receive calls or If toNumber can call fromNumber.',
    )
    inboundText: Optional[bool] = Field(
        None,
        description='If toNumber can receive texts or If toNumber can text fromNumber.',
    )
    outboundCall: Optional[bool] = Field(
        None,
        description='If toNumber can send calls or If fromNumber can call toNumber.',
    )
    outboundText: Optional[bool] = Field(
        None,
        description='If toNumber can send texts or If fromNumber can text toNumber.',
    )
    toNumber: Optional[str] = Field(
        None,
        description='destination DNC number in E.164 format (11-digit). Example: 12132000384',
    )


class UpdateContactListRequest(BaseModel):
    name: Optional[str] = Field(None, description='A name of a contact list')


class MusicOnHold(Enum):
    DEFAULT = 'DEFAULT'
    SILENCE = 'SILENCE'
    ALTERNATIVE = 'ALTERNATIVE'
    BLUES = 'BLUES'
    CELTIC = 'CELTIC'
    CLASSICAL = 'CLASSICAL'
    COUNTRY = 'COUNTRY'
    INSTRUMENTAL = 'INSTRUMENTAL'
    JAZZ = 'JAZZ'
    NEOPUNK = 'NEOPUNK'
    NEW_AGE = 'NEW_AGE'
    POP = 'POP'
    ROCK = 'ROCK'
    SWING = 'SWING'
    TECHNO = 'TECHNO'


class UserState(Enum):
    ACTIVE = 'ACTIVE'
    NEW_AUTH_INVITE = 'NEW_AUTH_INVITE'
    NEW_USER_INVITE = 'NEW_USER_INVITE'
    EXISTING_USER_INVITE = 'EXISTING_USER_INVITE'


class UserController(BaseModel):
    pass


class Webhook(BaseModel):
    callback: Optional[str] = Field(
        None, description='URL that webhook will send POST to on resource event trigger'
    )
    createdAt: Optional[int] = Field(
        None,
        description='A time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )
    enabled: Optional[bool] = Field(
        None,
        description='A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)',
    )
    events: Optional[List[str]] = Field(
        None,
        description='Comma separated list of events on resource that will trigger callbacks (ex: STARTED, STOPPED, FINISHED, etc...). ',
    )
    expiresAt: Optional[int] = Field(None, description='~')
    fields: Optional[str] = Field(
        None, description='A limit callback response to a particular fields'
    )
    id: Optional[int] = Field(None, description='An id of a webhook')
    name: Optional[str] = Field(None, description='A name of a webhook')
    nonStrictSsl: Optional[bool] = Field(
        None,
        description='A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)',
    )
    resource: Optional[str] = Field(
        None,
        description='A resource name that webhook is watching events on. Use GET /webhooks/resources to determine resources and events available (ex: InboundCall, OutboundCall, InboundText, OutboundText, CallBroadcast, TextBroadcast, etc...)',
    )
    secret: Optional[str] = Field(
        None,
        description="Webhook secret token which is used as a signing key to HmacSHA1 hash of json payload which is returned in 'X-CallFire-Signature' header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)",
    )
    singleUse: Optional[bool] = Field(
        None,
        description='If true is set then webhook triggers only once. Afterwards the webhook will be deleted',
    )
    updatedAt: Optional[int] = Field(
        None,
        description='A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )


class WebhookPage(Page):
    items: Optional[List[Webhook]] = None


class WebhookResource(BaseModel):
    resource: Optional[str] = Field(
        None,
        description='A name of a webhook resource (ex: InboundCall, OutboundCall, InboundText, OutboundText, CallBroadcast, TextBroadcast, etc...)',
    )
    supportedEvents: Optional[List[str]] = Field(
        None,
        description='A list of event names which are supported by webhook resource (ex: Started, Stopped, Finished, etc.)',
    )


class WeeklySchedule(BaseModel):
    daysOfWeek: Optional[List[str]] = Field(
        None, description='A scheduled days when operation will trigger'
    )
    startTimeOfDay: Optional[LocalTime] = None
    stopTimeOfDay: Optional[LocalTime] = None
    timeZone: Optional[str] = Field(None, description="A user's timezone")


class DayOfWeek(Enum):
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


class Month(Enum):
    JANUARY = 'JANUARY'
    FEBRUARY = 'FEBRUARY'
    MARCH = 'MARCH'
    APRIL = 'APRIL'
    MAY = 'MAY'
    JUNE = 'JUNE'
    JULY = 'JULY'
    AUGUST = 'AUGUST'
    SEPTEMBER = 'SEPTEMBER'
    OCTOBER = 'OCTOBER'
    NOVEMBER = 'NOVEMBER'
    DECEMBER = 'DECEMBER'


class TimeDefinition(Enum):
    UTC = 'UTC'
    WALL = 'WALL'
    STANDARD = 'STANDARD'


class Id(RootModel[List[int]]):
    root: List[int]


class DefaultVoice(Enum):
    MALE1 = 'MALE1'
    FEMALE1 = 'FEMALE1'
    FEMALE2 = 'FEMALE2'
    SPANISH1 = 'SPANISH1'
    FRENCHCANADIAN1 = 'FRENCHCANADIAN1'


class CallsPostRequest(RootModel[List[CallRecipient]]):
    root: List[CallRecipient]


class CallsBroadcastsIdRecipientsPostRequest(RootModel[List[Recipient]]):
    root: List[Recipient]


class CallsBroadcastsIdToggleRecipientsStatusPostRequest(RootModel[List[Recipient]]):
    root: List[Recipient]


class CampaignsSoundsFilesPostRequest(BaseModel):
    file: bytes = Field(..., description='A sound file encoded in binary form')
    name: Optional[str] = Field(
        None,
        description='Optional name of a sound file, if the name is empty than it will be taken from a file',
    )


class Number1(RootModel[List[str]]):
    root: List[str]


class ContactsPostRequest(RootModel[List[Contact]]):
    root: List[Contact]


class ContactsListsUploadPostRequest(BaseModel):
    file: bytes = Field(..., description='CSV file to be uploaded')
    name: Optional[str] = Field(None, description='A name of a contact list')
    useCustomFields: Optional[bool] = Field(
        None,
        description='A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc',
    )


class ContactId(RootModel[List[int]]):
    root: List[int]


class Keywords(RootModel[List[str]]):
    root: List[str]


class MediaPostRequest(BaseModel):
    file: bytes = Field(..., description='Binary media file')
    name: Optional[str] = Field(None, description='A name of a media file')


class Status9(RootModel[List[str]]):
    root: List[str]


class TextsPostRequest(RootModel[List[TextRecipient]]):
    root: List[TextRecipient]


class TextsBroadcastsIdRecipientsPostRequest(RootModel[List[TextRecipient]]):
    root: List[TextRecipient]


class TextsBroadcastsIdToggleRecipientsStatusPostRequest(RootModel[List[Recipient]]):
    root: List[Recipient]


class A2pUpgradeLeasePage(Page):
    items: Optional[List[A2pUpgradeLeaseDto]] = None


class AddContactListContactsRequest(BaseModel):
    contactIds: Optional[List[int]] = Field(
        None, description='A list of ids of existing contacts in CallFire system'
    )
    contactNumbers: Optional[List[str]] = Field(
        None,
        description='A phone number in E.164 format (11-digit). Examples: 12132000384',
    )
    contactNumbersField: Optional[str] = Field(
        None,
        description='A type of phone number (homePhone, workPhone, mobilePhone). This parameter works together with contactNumbers and specifies which types of numbers are included to a list',
    )
    contacts: Optional[List[Contact]] = Field(
        None, description='A list of new contact objects which need to be added'
    )
    useCustomFields: Optional[bool] = Field(
        None,
        description='A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc',
    )


class ApiCredentialPage(Page):
    items: Optional[List[ApiCredential]] = None


class AuthToken(BaseModel):
    accountId: Optional[int] = Field(None, description='~')
    adminClient: Optional[bool] = Field(None, description='~')
    adminToken: Optional[AuthToken] = None
    attributes: Optional[Dict[str, str]] = Field(None, description='~')
    brand: Optional[Brand] = Field(None, description='~')
    ezSpaClient: Optional[bool] = Field(None, description='~')
    migration: Optional[bool] = Field(None, description='~')
    session: Optional[OAuthSession] = None
    sessionId: Optional[str] = Field(None, description='~')
    userId: Optional[int] = Field(None, description='~')


class BatchPage(Page):
    items: Optional[List[Batch]] = None


class BatchRequest(BaseModel):
    contactListId: Optional[int] = Field(
        None, description='An id of existing contact list'
    )
    name: Optional[str] = Field(None, description='A name of batch')
    recipients: Optional[List[Recipient]] = Field(
        None,
        description='A list of Recipient objects. For each recipient you can set its phone number or existing contact id to use contact which already exists in account',
    )
    scrubDuplicates: Optional[bool] = Field(
        None, description='Removes duplicate recipients from batch if true'
    )


class CallBroadcast(BaseModel):
    answeringMachineConfig: Optional[AnsweringMachineConfig] = Field(
        None,
        description='Specifies which action should be taken if answering machine was detected, default value: AM_AND_LIVE. Available values: AM_ONLY - run AMD (Answering Machine Detection), hang up if LA (Live Answer); AM_AND_LIVE - run AMD, play separate live vs. machine sound; LIVE_WITH_AMD, run AMD, hang up if machine answers; LIVE_IMMEDIATE - no AMD, play live sound immediately',
    )
    dialplanXml: Optional[str] = Field(
        None,
        description='IVR xml is a document which describes the dialplan to setup the IVR broadcast',
    )
    fromNumber: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit) or short code for text. Example: 12132000384, 67076',
    )
    id: Optional[int] = Field(None, description='A unique id of broadcast (readonly)')
    labels: Optional[List[str]] = Field(None, description='Labels of a broadcast')
    lastModified: Optional[int] = Field(
        None,
        description='The time when a given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT ',
    )
    localTimeRestriction: Optional[LocalTimeRestriction] = None
    maxActive: Optional[int] = Field(
        None,
        description='Sets a maximum number of calls to be dialed by CallFire at once',
    )
    maxActiveTransfers: Optional[int] = Field(
        None, description='A maximum number of active transfers'
    )
    name: Optional[str] = Field(None, description='A name of a broadcast')
    recipients: Optional[List[Recipient]] = Field(
        None,
        description='Recipients of a call broadcast, can be either existing contacts or a new ones',
    )
    resumeNextDay: Optional[bool] = Field(
        None, description='If true resumes the unfinished campaign to the next day'
    )
    retryConfig: Optional[RetryConfig] = None
    schedules: Optional[List[Schedule]] = Field(
        None,
        description='A list of schedule objects which specifies a range of time when broadcast should be started and stopped. Supports the scheduling per day of week',
    )
    sounds: Optional[CallBroadcastSounds] = None
    status: Optional[Status2] = Field(
        None,
        description="A status of a broadcast (read only). SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived",
    )


class CallBroadcastPage(Page):
    items: Optional[List[CallBroadcast]] = None


class CallRecord(BaseModel):
    answerTime: Optional[int] = Field(
        None,
        description='Timestamp when call was answered, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    billedAmount: Optional[float] = Field(None, description='A cost of the call')
    callerName: Optional[str] = Field(None, description='~')
    duration: Optional[int] = Field(None, description='Duration of the call in seconds')
    finishTime: Optional[int] = Field(
        None,
        description='Timestamp when call was finished, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    id: Optional[int] = Field(None, description='An id of a call record')
    labels: Optional[List[str]] = Field(
        None, description='Labels associated with a call action'
    )
    notes: Optional[List[Note]] = Field(
        None, description='Notes of call added by agent'
    )
    originateTime: Optional[int] = Field(
        None,
        description='A date and time (timestamp) when call was originated by CallFire platform and went to downstream provider, formatted in unix time milliseconds (read only). Example: 1473781817000 ',
    )
    questionResponses: Optional[List[QuestionResponse]] = Field(
        None, description='Notes of call added by an agent'
    )
    recordings: Optional[List[CallRecording]] = Field(
        None, description='A list of voice recordings of the call'
    )
    result: Optional[Result] = Field(None, description='~')
    switchId: Optional[str] = Field(None, description='~')
    toNumber: Optional[str] = Field(
        None,
        description='A phone number to which a call was addressed. Phone number in E.164 format (11-digit). Example: 12132000384',
    )


class CallRecordingList(ItemList):
    items: Optional[List[CallRecording]] = None


class CallTrackingConfig(BaseModel):
    failedTransferSoundId: Optional[int] = Field(
        None,
        description='An id of sound file, played if caller can not be connected to transfer number for any reason',
    )
    googleAnalytics: Optional[GoogleAnalytics] = None
    introSoundId: Optional[int] = Field(
        None, description='An id of sound file, played if call is answered'
    )
    recorded: Optional[bool] = Field(None, description='Records all inbound calls')
    screen: Optional[bool] = Field(None, description='Screens the incoming calls')
    transferNumbers: Optional[List[str]] = Field(
        None,
        description='List of phone numbers in E.164 format (11-digit) are used for transfer. Example: 12132000384',
    )
    voicemail: Optional[bool] = Field(
        None, description='Enables voicemail if call is not transferred'
    )
    voicemailSoundId: Optional[int] = Field(
        None,
        description="An id of sound file, played if voicemail is enabled and a call isn't transferred",
    )
    weeklySchedule: Optional[WeeklySchedule] = None
    whisperSoundId: Optional[int] = Field(
        None, description='An id of sound file, played if call is screened'
    )


class CallerIdList(ItemList):
    items: Optional[List[CallerId]] = None


class CampaignSoundPage(Page):
    items: Optional[List[CampaignSound]] = None


class ContactListPage(Page):
    items: Optional[List[ContactList]] = None


class ContactPage(Page):
    items: Optional[List[Contact]] = None


class DncListDto(ItemList):
    items: Optional[List[DoNotContact]] = None


class DoNotContactPage(Page):
    items: Optional[List[DoNotContact]] = None


class ItemListUniversalDoNotContact(BaseModel):
    items: Optional[List[UniversalDoNotContact]] = Field(None, description='~')


class ItemListWebhookResource(BaseModel):
    items: Optional[List[WebhookResource]] = Field(None, description='~')


class KeywordConfig(BaseModel):
    keyword: Optional[str] = Field(None, description='~')
    textInboundConfig: Optional[TextInboundConfig] = None


class KeywordLeasePage(Page):
    items: Optional[List[KeywordLease]] = None


class ManagedAccountsPage(Page):
    items: Optional[List[ManagedAccountDto]] = None


class MessageTemplateCategoryPage(Page):
    items: Optional[List[MessageTemplateCategory]] = None


class Number(BaseModel):
    nationalFormat: Optional[str] = Field(None, description='~')
    number: Optional[str] = Field(None, description='~')
    region: Optional[Region] = None
    sendEmailOnCreate: Optional[bool] = Field(None, description='~')
    tollFree: Optional[bool] = Field(None, description='~')


class NumberConfig(BaseModel):
    callTrackingConfig: Optional[CallTrackingConfig] = None
    configType: Optional[ConfigType] = Field(
        None, description='A type of config. Available values: TRACKING, IVR'
    )
    ivrInboundConfig: Optional[IvrInboundConfig] = None
    number: Optional[str] = Field(
        None,
        description='Phone number in E.164 format (11-digit). Example: 12132000384',
    )
    textInboundConfig: Optional[TextInboundConfig] = None


class NumberConfigPage(Page):
    items: Optional[List[NumberConfig]] = None


class NumberLease(BaseModel):
    autoRenew: Optional[bool] = Field(
        None,
        description='Enables the auto renewal of number lease at end of each billing cycle',
    )
    callFeatureStatus: Optional[CallFeatureStatus] = Field(
        None,
        description='A status of a call feature. Available values: DISABLED, ENABLED',
    )
    labels: Optional[List[str]] = Field(None, description='~')
    leaseBegin: Optional[int] = Field(
        None,
        description='A date and time of a lease start. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )
    leaseEnd: Optional[int] = Field(
        None,
        description='A data and time of a lease finish. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )
    nationalFormat: Optional[str] = Field(
        None, description='Formatted number with a country code'
    )
    number: Optional[str] = Field(
        None,
        description='A phone number in E.164 format (11-digit). Example: 12132000384',
    )
    region: Optional[Region] = None
    sendEmailOnCreate: Optional[bool] = Field(None, description='~')
    status: Optional[Status5] = Field(
        None,
        description='A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE',
    )
    textFeatureStatus: Optional[TextFeatureStatus] = Field(
        None,
        description='A status of a text feature. Available values: DISABLED, ENABLED',
    )
    tollFree: Optional[bool] = Field(None, description='A  toll-free number')
    type: Optional[Type] = Field(None, description='~')


class NumberLeasePage(Page):
    items: Optional[List[NumberLease]] = None


class NumberList(ItemList):
    items: Optional[List[Number]] = None


class NumberOrder(BaseModel):
    created: Optional[int] = Field(
        None,
        description='The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )
    id: Optional[int] = Field(None, description='An id of an order')
    keywords: Optional[NumberOrderItem] = None
    localNumbers: Optional[NumberOrderItem] = None
    salesTax: Optional[float] = Field(None, description='~')
    status: Optional[Status7] = Field(
        None,
        description='A current status of an order. Available values: NEW, PROCESSING, FINISHED, ERRORED, VOID, WAIT_FOR_PAYMENT, REJECTED',
    )
    summary: Optional[float] = Field(None, description='~')
    tollFreeNumbers: Optional[NumberOrderItem] = None
    total: Optional[float] = Field(None, description='~')
    totalCost: Optional[float] = Field(None, description='A total cost of an order')


class PageNumberOrder(BaseModel):
    items: Optional[List[NumberOrder]] = Field(None, description='~')
    limit: Optional[int] = Field(None, description='~')
    offset: Optional[int] = Field(None, description='~')
    totalCount: Optional[int] = Field(None, description='~')


class PageWebhook(BaseModel):
    items: Optional[List[Webhook]] = Field(None, description='~')
    limit: Optional[int] = Field(None, description='~')
    offset: Optional[int] = Field(None, description='~')
    totalCount: Optional[int] = Field(None, description='~')


class Text(BaseModel):
    attributes: Optional[Dict[str, str]] = Field(
        None,
        description='Map of user-defined string attributes associated with an action',
    )
    batchId: Optional[int] = Field(
        None, description='An id of contact batch associated with an action'
    )
    campaignId: Optional[int] = Field(
        None,
        description='An id of broadcast if given text was sent as a part of text broadcast',
    )
    contact: Optional[Contact] = None
    created: Optional[int] = Field(
        None,
        description='The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    finalTextResult: Optional[FinalTextResult] = Field(
        None,
        description='Result of text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)',
    )
    fromNumber: Optional[str] = Field(
        None,
        description="Sender's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076",
    )
    id: Optional[int] = Field(None, description='An id of an action')
    inbound: Optional[bool] = Field(None, description='An action inbound')
    labels: Optional[List[str]] = Field(
        None, description='Labels associated with an action'
    )
    media: Optional[List[Media]] = Field(None, description='~')
    message: Optional[str] = Field(None, description='A text message')
    modified: Optional[int] = Field(
        None,
        description='The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT',
    )
    records: Optional[List[TextRecord]] = Field(
        None,
        description='List of text records, each record contains additional details: time of sending, cost, current state.  A single contact may have multiple numbers. If given text was sent as part of broadcast with configured retry logic then each text record will contain details about attempted number',
    )
    state: Optional[State3] = Field(
        None,
        description='Current state of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)',
    )
    toNumber: Optional[str] = Field(
        None,
        description="Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076",
    )


class TextBroadcast(BaseModel):
    bigMessageStrategy: Optional[BigMessageStrategy] = Field(
        None,
        description='If message length exceeds 160 characters, multiple messages will be sent, SEND_MULTIPLE strategy is chosen by default. Available values: SEND_MULTIPLE - send text as multiple messages, DO_NOT_SEND - do not send text if it exceeds 160 characters, TRIM - trims text message to 160 characters',
    )
    fromNumber: Optional[str] = Field(
        None,
        description='A phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076, etc',
    )
    id: Optional[int] = Field(None, description='A unique id of a broadcast')
    labels: Optional[List[str]] = Field(None, description='A labels of a broadcast')
    lastModified: Optional[int] = Field(
        None,
        description='A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000',
    )
    localTimeRestriction: Optional[LocalTimeRestriction] = None
    maxActive: Optional[int] = Field(
        None, description='A maximum number of texts that CallFire dials at once'
    )
    media: Optional[List[Media]] = Field(None, description='~')
    message: Optional[str] = Field(None, description='A text message')
    name: Optional[str] = Field(None, description='A name of a broadcast')
    recipients: Optional[List[TextRecipient]] = Field(
        None,
        description='Recipients of a text campaign, can be an existing contacts or a new one',
    )
    resumeNextDay: Optional[bool] = Field(None, description='~')
    schedules: Optional[List[Schedule]] = Field(None, description='~')
    status: Optional[Status8] = Field(
        None,
        description="A status of a broadcast. SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived",
    )


class TextBroadcastPage(Page):
    items: Optional[List[TextBroadcast]] = None


class TextList(ItemList):
    items: Optional[List[Text]] = None


class TextPage(Page):
    items: Optional[List[Text]] = None


class AuthController(BaseModel):
    admin: Optional[bool] = Field(None, description='~')
    authBrand: Optional[AuthBrand] = Field(None, description='~')
    authToken: Optional[AuthToken] = None
    migration: Optional[bool] = Field(None, description='~')


class Call(BaseModel):
    agentCall: Optional[bool] = Field(None, description='An internal call to an agent')
    attributes: Optional[Dict[str, str]] = Field(
        None,
        description='Map of user-defined string attributes associated with an action',
    )
    batchId: Optional[int] = Field(
        None, description='An id of contact batch associated with an action'
    )
    campaignId: Optional[int] = Field(
        None,
        description='An id of broadcast associated with an action if call is sent as part of call broadcast',
    )
    contact: Optional[Contact] = None
    created: Optional[int] = Field(
        None,
        description='The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT ',
    )
    finalCallResult: Optional[FinalCallResult] = Field(
        None,
        description='Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)',
    )
    fromNumber: Optional[str] = Field(
        None, description="A sender's phone number in E.164 (11-digit) format"
    )
    id: Optional[int] = Field(None, description='An id of  an action')
    inbound: Optional[bool] = Field(None, description='Is action inbound')
    labels: Optional[List[str]] = Field(
        None, description='Labels associated with action or broadcast for this action'
    )
    modified: Optional[int] = Field(
        None,
        description='The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT ',
    )
    notes: Optional[List[Note]] = Field(
        None, description='Notes of call added by an agent'
    )
    records: Optional[List[CallRecord]] = Field(
        None,
        description='List of call records, each record contains call details like originate time, duration, cost, notes made by agents. A single contact may have a multiple phone numbers. In this case if given call was sent as a part of broadcast with configured retry logic then each call record will contain details about attempted phone number',
    )
    state: Optional[State] = Field(
        None,
        description='State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)',
    )
    toNumber: Optional[str] = Field(
        None, description="A recipient's phone number in E.164 (11-digit) format"
    )


class CallList(ItemList):
    items: Optional[List[Call]] = None


class CallPage(Page):
    items: Optional[List[Call]] = None


class ContactHistory(BaseModel):
    calls: Optional[List[Call]] = Field(
        None, description='List of Call objects addressed to a given contact'
    )
    id: Optional[int] = Field(None, description='An id of a contact')
    texts: Optional[List[Text]] = Field(
        None, description='List of Text objects addressed to a given contact'
    )


class PageText(BaseModel):
    items: Optional[List[Text]] = Field(None, description='~')
    limit: Optional[int] = Field(None, description='~')
    offset: Optional[int] = Field(None, description='~')
    totalCount: Optional[int] = Field(None, description='~')


class Account(BaseModel):
    active: Optional[bool] = Field(None, description='~')
    address: Optional[str] = Field(None, description='~')
    age: Optional[Duration] = None
    agencyManagedAccounts: Optional[bool] = Field(None, description='~')
    allowedToCreateCampaign: Optional[bool] = Field(None, description='~')
    apiCallLimit: Optional[int] = Field(None, description='~')
    archived: Optional[bool] = Field(None, description='~')
    autoAddDoNotContact: Optional[bool] = Field(None, description='~')
    brand: Optional[Brand] = Field(None, description='~')
    canceled: Optional[bool] = Field(None, description='~')
    canceledOrArchived: Optional[bool] = Field(None, description='~')
    city: Optional[str] = Field(None, description='~')
    companyName: Optional[str] = Field(None, description='~')
    country: Optional[Country] = Field(None, description='~')
    countryOrDefault: Optional[CountryOrDefault] = Field(None, description='~')
    created: Optional[datetime] = Field(None, description='~')
    dateTimeZone: Optional[DateTimeZone] = None
    defaultNotificationTtlMillis: Optional[int] = Field(None, description='~')
    defaultNumberId: Optional[int] = Field(None, description='~')
    ein: Optional[str] = Field(None, description='~')
    entityType: Optional[EntityType] = Field(None, description='~')
    ez: Optional[bool] = Field(None, description='~')
    failedVerificationAttempts: Optional[int] = Field(None, description='~')
    fromNumberPool: Optional[str] = Field(None, description='~')
    id: Optional[int] = Field(None, description='An id of an account')
    industry: Optional[Industry] = Field(None, description='~')
    industryName: Optional[str] = Field(None, description='~')
    key: Optional[str] = Field(None, description='~')
    localTimeZoneRestriction: Optional[LocalTimeZoneRestriction] = None
    locale: Optional[Locale] = None
    maxAgents: Optional[int] = Field(None, description='~')
    messageClass: Optional[str] = Field(None, description='~')
    messageFlows: Optional[List[str]] = Field(None, description='~')
    name: Optional[str] = Field(None, description='Name associated with an account')
    outboundThreshold: Optional[int] = Field(None, description='~')
    receiverPeriodCall: Optional[int] = Field(None, description='~')
    receiverPeriodEnabled: Optional[bool] = Field(None, description='~')
    receiverPeriodGlobal: Optional[int] = Field(None, description='~')
    receiverPeriodText: Optional[int] = Field(None, description='~')
    receiverPeriodTimeUnit: Optional[ReceiverPeriodTimeUnit] = Field(
        None, description='~'
    )
    retainOnlyMetadata: Optional[bool] = Field(None, description='~')
    retainOnlyMetadataLastDetailRecordId: Optional[int] = Field(None, description='~')
    retainOnlyMetadataLastModified: Optional[datetime] = Field(None, description='~')
    scrub: Optional[bool] = Field(None, description='~')
    sharedShortCodeAllowed: Optional[bool] = Field(None, description='~')
    sharedShortCodeId: Optional[int] = Field(None, description='~')
    soaAccount: Optional[Account] = None
    startCapable: Optional[bool] = Field(None, description='~')
    state: Optional[str] = Field(None, description='~')
    status: Optional[Status] = Field(None, description='~')
    textOutboundThreshold: Optional[int] = Field(None, description='~')
    timeZone: Optional[TimeZone] = None
    timeZoneId: Optional[ZoneId] = None
    trustLevel: Optional[TrustLevel] = Field(None, description='~')
    tsrAgreement: Optional[datetime] = Field(None, description='~')
    tsrInitials: Optional[str] = Field(None, description='~')
    uiContext: Optional[str] = Field(None, description='~')
    universal: Optional[bool] = Field(None, description='~')
    website: Optional[str] = Field(None, description='~')
    zipcode: Optional[str] = Field(None, description='~')


class User(BaseModel):
    account: Optional[Account] = None
    accountHolder: Optional[bool] = Field(None, description='~')
    accountId: Optional[int] = Field(None, description='~')
    active: Optional[bool] = Field(None, description='~')
    apiPasswordLastFour: Optional[str] = Field(None, description='~')
    brand: Optional[Brand] = Field(None, description='~')
    cccAgent: Optional[bool] = Field(None, description='~')
    created: Optional[datetime] = Field(None, description='~')
    dateOfBirth: Optional[datetime] = Field(None, description='~')
    disabled: Optional[bool] = Field(None, description='~')
    firstName: Optional[str] = Field(None, description='~')
    fullName: Optional[str] = Field(None, description='~')
    id: Optional[int] = Field(None, description='~')
    industryName: Optional[str] = Field(None, description='~')
    lastName: Optional[str] = Field(None, description='~')
    musicOnHold: Optional[MusicOnHold] = Field(None, description='~')
    notificationSoundEnabled: Optional[bool] = Field(None, description='~')
    optIn: Optional[bool] = Field(None, description='~')
    optInNumber: Optional[str] = Field(None, description='~')
    permissions: Optional[List[str]] = Field(None, description='~')
    phoneNumber: Optional[str] = Field(None, description='~')
    phoneNumberExtension: Optional[str] = Field(None, description='~')
    phoneNumberExtensionDelaySec: Optional[int] = Field(None, description='~')
    phoneNumberForDisplay: Optional[str] = Field(None, description='~')
    phoneNumberVerified: Optional[bool] = Field(None, description='~')
    profileEmail: Optional[str] = Field(None, description='~')
    signupComplete: Optional[bool] = Field(None, description='~')
    soaUser: Optional[User] = None
    teamSeat: Optional[bool] = Field(None, description='~')
    userState: Optional[UserState] = Field(None, description='~')
    userStatePending: Optional[bool] = Field(None, description='~')
    visible: Optional[bool] = Field(None, description='~')


class ZoneId(BaseModel):
    id: Optional[str] = Field(None, description='~')
    rules: Optional[ZoneRules] = None


class ZoneOffset(BaseModel):
    id: Optional[str] = Field(None, description='~')
    rules: Optional[ZoneRules] = None
    totalSeconds: Optional[int] = Field(None, description='~')


class ZoneOffsetTransition(BaseModel):
    dateTimeAfter: Optional[datetime] = Field(None, description='~')
    dateTimeBefore: Optional[datetime] = Field(None, description='~')
    duration: Optional[Duration] = None
    gap: Optional[bool] = Field(None, description='~')
    instant: Optional[int] = Field(None, description='~')
    offsetAfter: Optional[ZoneOffset] = None
    offsetBefore: Optional[ZoneOffset] = None
    overlap: Optional[bool] = Field(None, description='~')


class ZoneOffsetTransitionRule(BaseModel):
    dayOfMonthIndicator: Optional[int] = Field(None, description='~')
    dayOfWeek: Optional[DayOfWeek] = Field(None, description='~')
    localTime: Optional[LocalTime] = None
    midnightEndOfDay: Optional[bool] = Field(None, description='~')
    month: Optional[Month] = Field(None, description='~')
    offsetAfter: Optional[ZoneOffset] = None
    offsetBefore: Optional[ZoneOffset] = None
    standardOffset: Optional[ZoneOffset] = None
    timeDefinition: Optional[TimeDefinition] = Field(None, description='~')


class ZoneRules(BaseModel):
    fixedOffset: Optional[bool] = Field(None, description='~')
    transitionRules: Optional[List[ZoneOffsetTransitionRule]] = Field(
        None, description='~'
    )
    transitions: Optional[List[ZoneOffsetTransition]] = Field(None, description='~')


OAuthSession.model_rebuild()
AuthToken.model_rebuild()
Account.model_rebuild()
ZoneId.model_rebuild()
ZoneOffset.model_rebuild()
